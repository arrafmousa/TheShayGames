import React, { useState, useEffect } from "react";
import { GameScore } from "@/entities/GameScore";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, RotateCcw, Trophy, Clock, Star, Image as ImageIcon } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function MemoryGame() {
  const [difficulty, setDifficulty] = useState("easy");
  const [gameStarted, setGameStarted] = useState(false);
  const [cards, setCards] = useState([]);
  const [flippedCards, setFlippedCards] = useState([]);
  const [matchedCards, setMatchedCards] = useState([]);
  const [moves, setMoves] = useState(0);
  const [time, setTime] = useState(0);
  const [gameComplete, setGameComplete] = useState(false);
  const [gameImages, setGameImages] = useState([]);

  const difficultySettings = {
    easy: { pairs: 6, gridCols: 4 },
    medium: { pairs: 8, gridCols: 4 },
    hard: { pairs: 12, gridCols: 6 }
  };

  useEffect(() => {
    loadGameImages();
  }, []);

  const loadGameImages = () => {
    const storedImages = localStorage.getItem('gameImages');
    if (storedImages) {
      try {
        const imageData = JSON.parse(storedImages);
        if (Array.isArray(imageData)) {
          setGameImages(imageData);
        } else {
          const imageArray = Object.values(imageData);
          setGameImages(imageArray.map((url, index) => ({ id: `img_${index}`, url, name: `Image ${index + 1}` })));
        }
      } catch (error) {
        console.error("Error parsing stored game images:", error);
        setGameImages([]);
      }
    }
  };

  useEffect(() => {
    let interval;
    if (gameStarted && !gameComplete) {
      interval = setInterval(() => {
        setTime(prev => prev + 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [gameStarted, gameComplete]);

  useEffect(() => {
    if (matchedCards.length === cards.length && cards.length > 0) {
      setGameComplete(true);
      saveScore();
    }
  }, [matchedCards, cards]);

  const initializeGame = () => {
    const { pairs } = difficultySettings[difficulty];
    
    if (gameImages.length < pairs) {
      alert(`You need at least ${pairs} unique images for the ${difficulty} difficulty. Please upload more images.`);
      return;
    }
    
    const shuffledGameImages = [...gameImages].sort(() => 0.5 - Math.random());
    const selectedImages = shuffledGameImages.slice(0, pairs);

    const gameCards = [];
    
    selectedImages.forEach((imageObj, index) => {
      gameCards.push(
        { id: index * 2, image: imageObj.url, isFlipped: false, isMatched: false },
        { id: index * 2 + 1, image: imageObj.url, isFlipped: false, isMatched: false }
      );
    });

    // Shuffle cards
    for (let i = gameCards.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [gameCards[i], gameCards[j]] = [gameCards[j], gameCards[i]];
    }

    setCards(gameCards);
    setFlippedCards([]);
    setMatchedCards([]);
    setMoves(0);
    setTime(0);
    setGameComplete(false);
    setGameStarted(true);
  };

  const handleCardClick = (cardId) => {
    if (flippedCards.length === 2 || 
        flippedCards.includes(cardId) || 
        matchedCards.includes(cardId)) {
      return;
    }

    const newFlippedCards = [...flippedCards, cardId];
    setFlippedCards(newFlippedCards);

    if (newFlippedCards.length === 2) {
      setMoves(prev => prev + 1);
      
      const [first, second] = newFlippedCards;
      const firstCard = cards.find(card => card.id === first);
      const secondCard = cards.find(card => card.id === second);

      if (firstCard.image === secondCard.image) {
        setMatchedCards(prev => [...prev, first, second]);
        setFlippedCards([]);
      } else {
        setTimeout(() => {
          setFlippedCards([]);
        }, 1000);
      }
    }
  };

  const saveScore = async () => {
    try {
      const score = Math.max(1000 - (moves * 10) - (time * 2), 100);
      await GameScore.create({
        game_type: "memory",
        score: score,
        time_seconds: time,
        difficulty: difficulty
      });
    } catch (error) {
      console.error("Error saving score:", error);
    }
  };

  const resetGame = () => {
    setGameStarted(false);
    setCards([]);
    setFlippedCards([]);
    setMatchedCards([]);
    setMoves(0);
    setTime(0);
    setGameComplete(false);
  };

  if (!gameStarted) {
    return (
      <div className="min-h-screen p-6 pb-20 md:pb-6">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center gap-4 mb-8">
            <Link to={createPageUrl("GameHub")}>
              <Button variant="outline" size="icon" className="border-purple-500/30 text-purple-300 hover:bg-purple-500/20">
                <ArrowLeft className="w-4 h-4" />
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-white">Memory Matching</h1>
              <p className="text-gray-400">Test your memory skills</p>
            </div>
          </div>

          <Card className="game-card border-0 max-w-2xl mx-auto">
            <CardContent className="p-8 text-center">
              {gameImages.length === 0 ? (
                <div className="mb-8">
                  <h2 className="text-2xl font-bold text-white mb-4">No Images Available</h2>
                  <p className="text-gray-400 mb-6">
                    You need to upload images first to play the memory game.
                  </p>
                  <Link to={createPageUrl("ImageManager")}>
                    <Button className="bg-gradient-to-r from-purple-500 to-blue-500 hover:opacity-90">
                      <ImageIcon className="w-5 h-5 mr-2" />
                      Upload Images
                    </Button>
                  </Link>
                </div>
              ) : (
                <>
                  <div className="mb-8">
                    <h2 className="text-2xl font-bold text-white mb-4">Choose Difficulty</h2>
                    <p className="text-gray-400 mb-6">Using {gameImages.length} uploaded images</p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      {Object.entries(difficultySettings).map(([level, settings]) => (
                        <Button
                          key={level}
                          variant={difficulty === level ? "default" : "outline"}
                          className={`p-6 h-auto flex flex-col gap-2 ${
                            difficulty === level 
                              ? "bg-gradient-to-r from-purple-500 to-blue-500" 
                              : "border-purple-500/30 text-purple-300 hover:bg-purple-500/20"
                          }`}
                          onClick={() => setDifficulty(level)}
                          disabled={gameImages.length < settings.pairs}
                        >
                          <span className="capitalize font-bold">{level}</span>
                          <span className="text-sm opacity-80">{settings.pairs} pairs</span>
                          {gameImages.length < settings.pairs && (
                            <span className="text-xs text-red-400">Requires {settings.pairs} images</span>
                          )}
                        </Button>
                      ))}
                    </div>
                  </div>

                  <Button
                    onClick={initializeGame}
                    className="bg-gradient-to-r from-purple-500 to-blue-500 hover:opacity-90 px-8 py-3 text-lg font-semibold"
                    disabled={gameImages.length < difficultySettings[difficulty].pairs}
                  >
                    Start Game
                  </Button>
                </>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-6 pb-20 md:pb-6">
      <div className="max-w-6xl mx-auto">
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-4">
            <Link to={createPageUrl("GameHub")}>
              <Button variant="outline" size="icon" className="border-purple-500/30 text-purple-300 hover:bg-purple-500/20">
                <ArrowLeft className="w-4 h-4" />
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-white">Memory Matching</h1>
              <Badge className="bg-purple-500/20 text-purple-300 border-purple-500/30 mt-1">
                {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}
              </Badge>
            </div>
          </div>

          <Button
            onClick={resetGame}
            variant="outline"
            className="border-purple-500/30 text-purple-300 hover:bg-purple-500/20"
          >
            <RotateCcw className="w-4 h-4 mr-2" />
            New Game
          </Button>
        </div>

        {/* Game Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          <Card className="game-card border-0">
            <CardContent className="p-4 text-center">
              <Clock className="w-6 h-6 text-blue-400 mx-auto mb-2" />
              <p className="text-2xl font-bold text-white">{Math.floor(time / 60)}:{(time % 60).toString().padStart(2, '0')}</p>
              <p className="text-sm text-gray-400">Time</p>
            </CardContent>
          </Card>
          
          <Card className="game-card border-0">
            <CardContent className="p-4 text-center">
              <Star className="w-6 h-6 text-yellow-400 mx-auto mb-2" />
              <p className="text-2xl font-bold text-white">{moves}</p>
              <p className="text-sm text-gray-400">Moves</p>
            </CardContent>
          </Card>

          <Card className="game-card border-0">
            <CardContent className="p-4 text-center">
              <Trophy className="w-6 h-6 text-green-400 mx-auto mb-2" />
              <p className="text-2xl font-bold text-white">{matchedCards.length / 2}</p>
              <p className="text-sm text-gray-400">Matches</p>
            </CardContent>
          </Card>

          <Card className="game-card border-0">
            <CardContent className="p-4 text-center">
              <div className="w-6 h-6 bg-purple-500 rounded-full mx-auto mb-2"></div>
              <p className="text-2xl font-bold text-white">{cards.length / 2}</p>
              <p className="text-sm text-gray-400">Total Pairs</p>
            </CardContent>
          </Card>
        </div>

        {/* Game Board */}
        <div 
          className={`grid gap-4 mx-auto max-w-4xl`}
          style={{ 
            gridTemplateColumns: `repeat(${difficultySettings[difficulty].gridCols}, 1fr)` 
          }}
        >
          {cards.map((card) => {
            const isFlipped = flippedCards.includes(card.id) || matchedCards.includes(card.id);
            const isMatched = matchedCards.includes(card.id);
            
            return (
              <Card
                key={card.id}
                className={`aspect-square cursor-pointer transition-all duration-300 border-0 ${
                  isMatched 
                    ? "game-card opacity-75 scale-95" 
                    : "game-card hover:scale-105"
                }`}
                onClick={() => handleCardClick(card.id)}
              >
                <CardContent className="p-0 h-full flex items-center justify-center text-4xl relative overflow-hidden">
                  {/* Card back (always visible when not flipped) */}
                  <div className={`absolute inset-0 bg-gradient-to-br from-purple-500 to-blue-500 transition-transform duration-500 ${
                    isFlipped ? "transform rotateY-180 opacity-0" : ""
                  }`}>
                    <div className="w-full h-full flex items-center justify-center">
                      <div className="w-8 h-8 bg-white/20 rounded-lg animate-pulse"></div>
                    </div>
                  </div>
                  
                  {/* Card front (image - only visible when flipped) */}
                  <div className={`absolute inset-0 transition-transform duration-500 ${
                    isFlipped ? "" : "transform rotateY-180 opacity-0"
                  } flex items-center justify-center`}>
                    <img 
                      src={card.image} 
                      alt="Game card" 
                      className="w-full h-full object-cover rounded-lg"
                    />
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Game Complete Modal */}
        {gameComplete && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
            <Card className="game-card border-0 max-w-md w-full">
              <CardContent className="p-8 text-center">
                <Trophy className="w-16 h-16 text-yellow-400 mx-auto mb-4" />
                <h2 className="text-2xl font-bold text-white mb-4">Congratulations!</h2>
                <p className="text-gray-300 mb-6">You completed the memory game!</p>
                
                <div className="grid grid-cols-2 gap-4 mb-6">
                  <div>
                    <p className="text-2xl font-bold text-purple-300">{moves}</p>
                    <p className="text-sm text-gray-400">Moves</p>
                  </div>
                  <div>
                    <p className="text-2xl font-bold text-blue-300">{time}s</p>
                    <p className="text-sm text-gray-400">Time</p>
                  </div>
                </div>

                <div className="flex gap-4">
                  <Button 
                    onClick={resetGame}
                    className="flex-1 bg-gradient-to-r from-purple-500 to-blue-500 hover:opacity-90"
                  >
                    Play Again
                  </Button>
                  <Link to={createPageUrl("GameHub")} className="flex-1">
                    <Button variant="outline" className="w-full border-purple-500/30 text-purple-300 hover:bg-purple-500/20">
                      Back to Hub
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
}
