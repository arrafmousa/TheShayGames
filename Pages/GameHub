
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { GameScore } from "@/entities/GameScore";
import { User } from "@/entities/User";
import { 
  Brain, 
  Puzzle, 
  Bird,
  Play,
  Trophy,
  Clock,
  Star,
  Zap,
  Sparkles,
  Upload,
  Image as ImageIcon
} from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

export default function GameHub() {
  const [gameImages, setGameImages] = useState([]);
  const [recentScores, setRecentScores] = useState([]);
  const [user, setUser] = useState(null);

  useEffect(() => {
    loadUser();
    loadRecentScores();
    loadGameImages();
  }, []);

  const loadUser = async () => {
    try {
      const userData = await User.me();
      setUser(userData);
    } catch (error) {
      // User not logged in
    }
  };

  const loadRecentScores = async () => {
    try {
      const scores = await GameScore.list("-created_date", 5);
      setRecentScores(scores);
    } catch (error) {
      console.error("Error loading scores:", error);
    }
  };

  const loadGameImages = () => {
    const storedImages = localStorage.getItem('gameImages');
    if (storedImages) {
      try {
        const imageData = JSON.parse(storedImages);
        if (Array.isArray(imageData)) {
          setGameImages(imageData);
        } else {
          // Convert old format to new format
          const imageArray = Object.values(imageData).map((url, index) => ({
            id: `img_${index}`,
            url: url,
            name: `Image ${index + 1}`
          }));
          setGameImages(imageArray);
        }
      } catch (error) {
        console.error("Error parsing stored images:", error);
        setGameImages([]);
      }
    }
  };

  const games = [
    {
      id: "memory",
      title: "Memory Matching",
      description: "Test your memory by matching pairs of hidden images",
      icon: Brain,
      color: "from-purple-500 to-pink-500",
      glowColor: "glow-purple",
      page: "MemoryGame",
      difficulty: ["Easy", "Medium", "Hard"],
      estimatedTime: "2-5 min"
    },
    {
      id: "sliding",
      title: "Sliding Puzzle",
      description: "Arrange tiles to recreate the original image",
      icon: Puzzle,
      color: "from-blue-500 to-cyan-500",
      glowColor: "glow-blue",
      page: "SlidingPuzzle",
      difficulty: ["3x3", "4x4", "5x5"],
      estimatedTime: "3-10 min"
    },
    {
      id: "jigsaw",
      title: "Jigsaw Puzzle",
      description: "Put together puzzle pieces to complete the picture",
      icon: Puzzle,
      color: "from-green-500 to-emerald-500",
      glowColor: "glow-green",
      page: "JigsawPuzzle", 
      difficulty: ["16 pieces", "36 pieces", "64 pieces"],
      estimatedTime: "5-15 min"
    },
    {
      id: "flappy",
      title: "Flappy Adventure",
      description: "Guide your character through obstacles and collect points",
      icon: Bird,
      color: "from-orange-500 to-red-500",
      glowColor: "glow-orange",
      page: "FlappyGame",
      difficulty: ["Casual", "Normal", "Expert"],
      estimatedTime: "Endless"
    }
  ];

  return (
    <div className="min-h-screen p-6 pb-20 md:pb-6">
      <div className="max-w-7xl mx-auto">
        {/* Hero Section */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-purple-500/20 to-blue-500/20 rounded-full border border-purple-500/30 mb-6">
            <Sparkles className="w-4 h-4 text-purple-300" />
            <span className="text-purple-300 text-sm font-medium">Custom Image Gaming Experience</span>
          </div>
          
          <h1 className="text-4xl md:text-6xl font-bold text-white mb-4">
            Welcome to{" "}
            <span className="bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">
              GameVerse
            </span>
          </h1>
          <p className="text-xl text-gray-300 mb-8 max-w-2xl mx-auto">
            Challenge yourself with our collection of brain-training games using your own custom images
          </p>

          {gameImages.length === 0 && (
            <div className="mb-8">
              <Card className="game-card border-yellow-500/30 max-w-2xl mx-auto">
                <CardContent className="p-6">
                  <div className="flex items-center gap-4 text-yellow-300">
                    <Upload className="w-8 h-8 flex-shrink-0" />
                    <div className="text-left">
                      <h3 className="font-bold mb-1">Upload Images to Get Started</h3>
                      <p className="text-sm text-yellow-200/80">
                        Add your own images to unlock all games. You'll need at least 5 images for the best experience.
                      </p>
                    </div>
                  </div>
                  <Link to={createPageUrl("ImageManager")} className="block mt-4">
                    <Button className="w-full bg-gradient-to-r from-yellow-500 to-orange-500 hover:opacity-90">
                      <ImageIcon className="w-4 h-4 mr-2" />
                      Manage Images
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            </div>
          )}
        </div>

        {/* Image Status */}
        {gameImages.length > 0 && (
          <div className="text-center mb-8">
            <div className="inline-flex items-center gap-3 px-6 py-3 bg-green-500/20 border border-green-500/30 rounded-full">
              <ImageIcon className="w-5 h-5 text-green-400" />
              <span className="text-green-300 font-medium">
                {gameImages.length} image{gameImages.length !== 1 ? 's' : ''} ready for gaming
              </span>
              <Link to={createPageUrl("ImageManager")}>
                <Button variant="ghost" size="sm" className="text-green-300 hover:bg-green-500/20 h-auto py-1">
                  Manage
                </Button>
              </Link>
            </div>
          </div>
        )}

        {/* Games Grid */}
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          {games.map((game) => {
            const requiresImages = ['memory', 'sliding', 'jigsaw'].includes(game.id);
            const isDisabled = requiresImages && gameImages.length === 0;

            return (
              <Card key={game.id} className="game-card hover:scale-105 transition-all duration-300 group border-0 overflow-hidden">
                <CardContent className="p-0">
                  <div className={`h-32 bg-gradient-to-br ${game.color} relative overflow-hidden`}>
                    <div className="absolute inset-0 bg-black/20"></div>
                    <div className="absolute top-4 left-4">
                      <game.icon className="w-8 h-8 text-white" />
                    </div>
                    <div className="absolute bottom-4 right-4">
                      <Badge variant="secondary" className="bg-white/20 text-white border-0">
                        <Clock className="w-3 h-3 mr-1" />
                        {game.estimatedTime}
                      </Badge>
                    </div>
                  </div>
                  
                  <div className="p-6">
                    <h3 className="text-xl font-bold text-white mb-2 group-hover:text-purple-300 transition-colors">
                      {game.title}
                    </h3>
                    <p className="text-gray-400 text-sm mb-4">
                      {game.description}
                    </p>
                    
                    <div className="flex flex-wrap gap-2 mb-4">
                      {game.difficulty.map((diff) => (
                        <Badge key={diff} variant="outline" className="text-xs border-purple-500/30 text-purple-300">
                          {diff}
                        </Badge>
                      ))}
                    </div>

                    <Link to={createPageUrl(game.page)} className="block">
                      <Button 
                        className={`w-full bg-gradient-to-r ${game.color} hover:opacity-90 border-0 font-semibold`}
                        disabled={isDisabled}
                      >
                        <Play className="w-4 h-4 mr-2" />
                        {isDisabled ? "Upload Images First" : "Play Now"}
                      </Button>
                    </Link>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Stats Section */}
        {recentScores.length > 0 && (
          <div className="grid md:grid-cols-2 gap-6">
            <Card className="game-card border-0">
              <CardContent className="p-6">
                <div className="flex items-center gap-3 mb-4">
                  <Trophy className="w-6 h-6 text-yellow-400" />
                  <h3 className="text-xl font-bold text-white">Recent Achievements</h3>
                </div>
                <div className="space-y-3">
                  {recentScores.map((score, index) => (
                    <div key={score.id} className="flex items-center justify-between p-3 bg-white/5 rounded-lg">
                      <div>
                        <p className="font-medium text-white capitalize">
                          {score.game_type.replace('_', ' ')}
                        </p>
                        <p className="text-sm text-gray-400">
                          {score.difficulty || 'Normal'} difficulty
                        </p>
                      </div>
                      <div className="text-right">
                        <p className="font-bold text-purple-300">{score.score}</p>
                        {score.time_seconds && (
                          <p className="text-xs text-gray-400">
                            {Math.round(score.time_seconds)}s
                          </p>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card className="game-card border-0">
              <CardContent className="p-6">
                <div className="flex items-center gap-3 mb-4">
                  <Star className="w-6 h-6 text-blue-400" />
                  <h3 className="text-xl font-bold text-white">Game Tips</h3>
                </div>
                <div className="space-y-4">
                  <div className="flex gap-3">
                    <Zap className="w-5 h-5 text-yellow-400 mt-1 flex-shrink-0" />
                    <div>
                      <p className="text-white font-medium">Memory Games</p>
                      <p className="text-sm text-gray-400">Focus on patterns and take your time</p>
                    </div>
                  </div>
                  <div className="flex gap-3">
                    <Zap className="w-5 h-5 text-blue-400 mt-1 flex-shrink-0" />
                    <div>
                      <p className="text-white font-medium">Puzzle Games</p>
                      <p className="text-sm text-gray-400">Start with corners and edges</p>
                    </div>
                  </div>
                  <div className="flex gap-3">
                    <Zap className="w-5 h-5 text-green-400 mt-1 flex-shrink-0" />
                    <div>
                      <p className="text-white font-medium">Flappy Adventure</p>
                      <p className="text-sm text-gray-400">Stay calm and maintain rhythm</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
}
